<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--namespace命名空间，作用就是对sql进行分类化的管理，理解为sql隔离
    注意：使用mapper代理开发时，namespace有特殊作用  -->
<mapper namespace="test">
    <!--在映射文件中配置很多sql语句  -->

    <!--需求：通过id查询用户表的记录  -->
    <!--id：标识映射文件中的sql，称为statement的id。将sql语句封装在mapperStatement的对象中，所有id称为Statement的id；
        parameterType：指定输入参数的类型，这里指定int型；
        #{}:表示一个占位符；
        #{id}:其中id表示接收输入的参数，参数名称就是id，如果输入参数是简单类型，#{}中的参数名可以任意，可以是value或其它名称；
        resultType：指定输出结果所映射的Java对象类型，select指定resultType表示将单条记录映射成Java对象。
      -->
    <select id="findUserById" parameterType="java.lang.Integer" resultType="com.bruce.module.mybatis.entity.User">
        select * from user where id=#{id}
    </select>

    <!--
    需求：添加用户
    parameterType:指定输入的参数类型是pojo（包括用户信息）；
    #{}：中指定pojo的属性名称，接收到pojo对象的属性值，mybatis通过ONGL（类似于struts2的OGNL）获取对象的属性值
      -->
    <insert id="insertUser" parameterType="com.bruce.module.mybatis.entity.User">
        <!-- 将insert插入的数据的主键返回到User对象中；
            select last_insert_id()：得到刚inser进去记录的主键值，只适用于自增主键；
            keyProperty：将查询到的主键值，设置到parameterType指定的对象的那个属性；
            order：select last_insert_id()的执行顺序，相对于insert语句来说它的执行顺序；
            resultType：指定select last_insert_id()的结果类型；
          -->
        <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
            select uuid()
        </selectKey>
        insert into user (id,username,sex,address,birthday) values (#{id},#{username},#{sex},#{address},#{birthday})
    </insert>

    <!-- 需求：删除用户  -->
    <delete id="deleteUser" parameterType="java.lang.Integer">
        delete from user where id=#{id}
    </delete>

    <!-- 需求：更新用户 注意：id必须存在 -->
    <update id="updateUser" parameterType="com.bruce.module.mybatis.entity.User">
        update user set username=#{username},sex=#{sex},address=#{address},birthday=#{birthday} where id=#{id}
    </update>
</mapper>